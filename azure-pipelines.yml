# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

name: $(TeamProject)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)_$(Rev:.r)
variables:
  - group: external-variables
  - name: buildId
    value: '$(Build.BuildId)'
  - name: System.Debug
    value: true
  - name: noci
    value: toto

stages :

# - stage: Status
#   displayName: Get Builds by Commit
#   jobs:
#     - job:   
#       displayName: Get Builds by Commit
#       variables:
#         AUTH : "Authorization: Bearer $(System.AccessToken)"
#       pool:
#         vmImage: 'ubuntu-latest'
#       steps:
#         - script: curl -X GET -H '$(AUTH)' "$( echo "https://dev.azure.com/thierrychantier/$(System.TeamProject)/_apis/build/builds" | sed 's/ /%20/g' )" >> output.txt
#         - script: cat output.txt
#         - script: cat output.txt | jq -c '. .value[] | select(.sourceVersion | contains("$(Build.SourceVersion)")) | .id'

- stage: Build
  displayName: Build stage
  variables:
    noci: false
    notest: false
    alldbtests: false 
    GITHUB_AUTH: '$(secure-github-token)'
    taskStatus: 'failure'

  jobs:
    - job: UNIT_TEST
      continueOnError: true
      displayName: UNIT_TEST
      timeoutInMinutes: 0 # 0 veut dire max value, par défaut c'est 60 minutes pour windows agent sur un git privé
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - template: extract_git_commit_flags.yml
        parameters:
          GIT_COMMIT: $(Build.SourceVersionMessage)
      - task: Maven@3
        displayName: UnitTest
        name: UnitTest
        condition: and(eq(variables['noci'], 'false'), eq(variables['notest'], 'false'))
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          goals: 'test -P UnitTest'
      - template: github_statuses.yml
        parameters: 
          TASK_NAME: 'UnitTest'
          GITHUB_AUTH: $(GITHUB_AUTH)
          GIT_COMMIT: $(Build.SourceVersion)
          BUILDID: $(Build.BuildId)
          ACCESS_TOKEN : "$(System.AccessToken)"
      - task: Maven@3
        displayName: DBTest
        name: DBTest
        condition: or(eq(variables['runDbTest'], 'true'), and(eq(variables['noci'], 'false'), eq(variables['alldbtests'], 'true')))
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          goals: 'test -P DBTest'
      - template: github_statuses.yml
        parameters: 
          TASK_NAME: 'DBTest'
          GITHUB_AUTH: $(GITHUB_AUTH)
          GIT_COMMIT: $(Build.SourceVersion)
          BUILDID: $(Build.BuildId)
          ACCESS_TOKEN : "$(System.AccessToken)"
    # - job: DB_TEST
    #   condition: always()
    #   continueOnError: true
    #   displayName: DB_TEST
    #   dependsOn: UNIT_TEST
    #   timeoutInMinutes: 0 # 0 veut dire max value, par défaut c'est 60 minutes pour windows agent sur un git privé
    #   pool:
    #     vmImage: 'ubuntu-latest'
    #   steps:
    #   - template: extract_git_commit_flags.yml
    #     parameters:
    #       GIT_COMMIT: $(Build.SourceVersionMessage)
    #   
      # - task: AzureCLI@2
      #   displayName: Azure CLI
      #   inputs:
      #     azureSubscription: thierry-sandox
      #     addSpnToEnvironment: true
      #     scriptType: bash
      #     scriptLocation: inlineScript
      #     inlineScript: |
      #       az storage blob upload-batch -d test-az-cli -s $(System.DefaultWorkingDirectory)/target/surefire-reports/ --pattern TEST*.xml --account-name $(secure-storage-account-name)  --account-key $(secure-storage-account-key)
      
      
      - task: PublishTestResults@2
        displayName: Merge Test Results
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/TEST-*.xml' 
          mergeTestResults: true
      ## Tache non compatible avec un agent linux
      # - task: AzureFileCopy@4
      #   inputs:
      #     sourcePath: '**/surefire-reports/TEST-*.xml'
      #     azureSubscription: 'thierry-sandox'
      #     destination: AzureBlob
      #     storage: 
      #     containerName: # Required when destination == AzureBlob
      #     #blobPrefix: # Optional
      #     #resourceGroup: # Required when destination == AzureVMs
      #     #resourceFilteringMethod: 'machineNames' # Optional. Options: machineNames, tags
      #     #machineNames: # Optional
      #     #vmsAdminUserName: # Required when destination == AzureVMs
      #     #vmsAdminPassword: # Required when destination == AzureVMs
      #     #targetPath: # Required when destination == AzureVMs
      #     #additionalArgumentsForBlobCopy: # Optional
      #     #additionalArgumentsForVMCopy: # Optional
      #     #enableCopyPrerequisites: false # Optional
      #     #copyFilesInParallel: true # Optional
      #     #cleanTargetBeforeCopy: false # Optional
      #     #skipCACheck: true # Optional
      #     #sasTokenTimeOutInMinutes: # Optional

- stage: Package
  displayName: Package stage
  condition: always()
  
  jobs:  
    - job: Test
      continueOnError: true
      displayName: Job Test
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - script: echo $(noci)
      - task: Maven@3
        displayName: Package
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          jdkArchitectureOption: 'x64'
          goals: 'package -DskipTests=true'
      - task: CopyFiles@2
        inputs:
          contents: 'target/**.war'
          targetFolder: $(Build.ArtifactStagingDirectory)
      # - task: PublishBuildArtifacts@1 ## Deprecated
      #   inputs:
      #     pathToPublish: $(Build.ArtifactStagingDirectory)
      #     artifactName: MonWarBuild
      - task: PublishPipelineArtifact@1 ## Recommended
        inputs:
          targetPath: $(Build.ArtifactStagingDirectory)
          artifactName: MonWarPipeline            

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Package
  condition: succeeded('Package')
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'no_approbation'
    strategy:
      runOnce:
        deploy:
          steps:
            
            - task: DownloadPipelineArtifact@2 ## Recommended
              inputs:
                artifact: MonWarPipeline
                buildId: 106
            - task: DownloadPipelineArtifact@2 ## Recommended
              inputs:
                artifact: MonWarPipeline
            # - task: DownloadBuildArtifacts@0 ## Deprecated
            #   inputs:
            #     artifactName: MonWarBuild