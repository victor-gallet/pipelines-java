# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

name: $(TeamProject)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)_$(Rev:.r)
variables:
  - group: external-variables
  - name: buildId
    value: '$(Build.BuildId)'
  - name: System.Debug
    value: true

stages :

# - stage: Status
#   displayName: Get Builds by Commit
#   jobs:
#     - job:   
#       displayName: Get Builds by Commit
#       variables:
#         AUTH : "Authorization: Bearer $(System.AccessToken)"
#       pool:
#         vmImage: 'ubuntu-latest'
#       steps:
#         - script: curl -X GET -H '$(AUTH)' "$( echo "https://dev.azure.com/thierrychantier/$(System.TeamProject)/_apis/build/builds" | sed 's/ /%20/g' )" >> output.txt
#         - script: cat output.txt
#         - script: cat output.txt | jq -c '. .value[] | select(.sourceVersion | contains("$(Build.SourceVersion)")) | .id'

- stage: Build
  displayName: Build stage

  jobs:
    - job: Test
      displayName: Job Test
      variables:
        MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
        MAVEN_OPTS: '-Xmx3072m -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
      timeoutInMinutes: 0 # 0 veut dire max value, par défaut c'est 60 minutes pour windows agent sur un git privé
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: Cache@2
        inputs:
          key: 'maven | "$(Agent.OS)" | **/pom.xml'
          restoreKeys: |
             maven | "$(Agent.OS)"
             maven
          path: $(MAVEN_CACHE_FOLDER)
        displayName: Cache Maven local repo
      - task: Maven@3
        displayName: UnitTest
        condition: and(not(contains(variables['Build.SourceVersionMessage'], '@noci')),not(contains(variables['Build.SourceVersionMessage'], '@notests')))
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: $(MAVEN_OPTS)
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          goals: 'test -P UnitTest'
      - task: Maven@3
        displayName: DBTest
        condition: or(eq(variables['runDbTest'], 'true'), and(not(contains(variables['Build.SourceVersionMessage'], '@noci')), contains(variables['Build.SourceVersionMessage'], '@dbtests')))
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: $(MAVEN_OPTS)
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          goals: 'test -P DBTest'

      - task: AzureCLI@2
        displayName: Azure CLI
        inputs:
          azureSubscription: thierry-sandox
          addSpnToEnvironment: true
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az storage blob upload-batch -d test-az-cli -s $(System.DefaultWorkingDirectory)/target/surefire-reports/ --pattern TEST*.xml --account-name $(secure-storage-account-name)  --account-key $(secure-storage-account-key)
      
      
      - task: PublishTestResults@2
        displayName: Merge Test Results
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/TEST-*.xml' 
          mergeTestResults: true
      ## Tache non compatible avec un agent linux
      # - task: AzureFileCopy@4
      #   inputs:
      #     sourcePath: '**/surefire-reports/TEST-*.xml'
      #     azureSubscription: 'thierry-sandox'
      #     destination: AzureBlob
      #     storage: 
      #     containerName: # Required when destination == AzureBlob
      #     #blobPrefix: # Optional
      #     #resourceGroup: # Required when destination == AzureVMs
      #     #resourceFilteringMethod: 'machineNames' # Optional. Options: machineNames, tags
      #     #machineNames: # Optional
      #     #vmsAdminUserName: # Required when destination == AzureVMs
      #     #vmsAdminPassword: # Required when destination == AzureVMs
      #     #targetPath: # Required when destination == AzureVMs
      #     #additionalArgumentsForBlobCopy: # Optional
      #     #additionalArgumentsForVMCopy: # Optional
      #     #enableCopyPrerequisites: false # Optional
      #     #copyFilesInParallel: true # Optional
      #     #cleanTargetBeforeCopy: false # Optional
      #     #skipCACheck: true # Optional
      #     #sasTokenTimeOutInMinutes: # Optional

- stage: Package
  displayName: Package stage
  
  jobs:  
    - job: Test
      displayName: Job Test
      variables:
        npm_config_cache: $(Pipeline.Workspace)/.npm
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: Cache@2
          displayName: Cache npm
          inputs:
            key: 'npm | "$(Agent.OS)" | $(System.DefaultWorkingDirectory)/webapp/package-lock.json'
            restoreKeys: |
              npm | "$(Agent.OS)"
              npm
            path: $(npm_config_cache)
        - task: Npm@1
          inputs:
            command: 'install' # Options: install, publish, custom
            workingDir: '$(System.DefaultWorkingDirectory)/webapp'
            verbose: true
        - task: Npm@1
          inputs:
            command: 'custom' # Options: install, publish,
            workingDir: '$(System.DefaultWorkingDirectory)/webapp'
            verbose: true
            customCommand: 'run build'
        - script: echo -e "ACCOUNT_NAME=$(secure-storage-account-name)\nACCOUNT_KEY=$(secure-storage-account-key)" > $(System.DefaultWorkingDirectory)/webapp/.env
        - task: ArchiveFiles@2
          displayName: 'Archive files'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/webapp'
            includeRootFolder: false
            archiveType: zip
            archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            replaceExistingArchive: true

        - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
          artifact: webapp

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Package
  condition: succeeded('Package')
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'no_approbation'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              inputs:
                azureSubscription: thierry-sandox
                appType: webAppLinux
                appName: test-webapp-semarchy
                runtimeStack: 'NODE|10.10'
                package: $(Pipeline.Workspace)/webapp/$(Build.BuildId).zip
                startUpCommand: "ls && npm run prod"
              # customWebConfig: '-Handler ls -miisnode -NodeStartFile index.js -appType node'
            # - task: DownloadPipelineArtifact@2 ## Recommended
            #   inputs:
            #     artifact: MonWarPipeline
            #     buildId: 106
            # - task: DownloadPipelineArtifact@2 ## Recommended
            #   inputs:
            #     artifact: MonWarPipeline
            # - task: DownloadBuildArtifacts@0 ## Deprecated
            #   inputs:
            #     artifactName: MonWarBuild